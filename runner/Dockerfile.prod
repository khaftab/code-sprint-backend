# Stage 1: Builder
FROM node:20-alpine AS builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache make g++ python3 linux-headers bash gcc musl-dev

# Copy package files
COPY package*.json ./

# Install all dependencies including devDependencies
RUN npm install

# Copy source code
COPY . .

# Build TypeScript project
RUN npm run build

# Prune dev dependencies
RUN npm prune --production


# Stage 2: Production
FROM node:20-alpine

WORKDIR /app

# Install runtime dependencies
RUN apk add --no-cache bash openjdk11 go ruby acl python3 g++ gcc

# Create devx user and group
RUN addgroup -S devx && adduser -S devx -G devx -s /bin/bash

# Install TypeScript globally
RUN npm install -g typescript

# Configure workspace permissions
RUN mkdir -p /home/devx/workspace && \
    chown root:devx /home/devx/workspace && \
    chmod 2775 /home/devx/workspace && \
    setfacl -d -m g::rwx /home/devx/workspace && \
    setfacl -d -m o::rx /home/devx/workspace

# Configure home directory
RUN mkdir -p /home/devx && \
    chown root:devx /home/devx && \
    chmod 755 /home/devx

# Create cache directories
RUN mkdir -p /home/devx/.cache/go-build && \
    chown -R devx:devx /home/devx/.cache

# Set environment variables
ENV GOPATH=/home/devx/go
ENV PATH=$PATH:$GOPATH/bin
ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk
ENV NODE_ENV=production

# Copy built artifacts from builder
COPY --from=builder --chown=devx:devx /app/dist ./dist
COPY --from=builder --chown=devx:devx /app/node_modules ./node_modules
COPY --from=builder --chown=devx:devx /app/package*.json ./

# Secure system directories
RUN chown -R root:root /app && \
    chmod -R 750 /app && \
    chown -R root:root /etc/apk && \
    chmod 755 /etc/apk

# Final permissions fix
RUN chmod -R g+rwX /home/devx/workspace

# Switch to non-root user
# USER devx

EXPOSE 5000

CMD ["node", "dist/server.js"]